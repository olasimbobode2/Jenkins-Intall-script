JENKINS-INSTALLATION
Prerequisite
AWS Acccount.
Create Redhat EC2 T2.medium Instance with 4GB RAM.
Create Security Group and open Required ports.

sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
sudo yum upgrade
# Add required dependencies for the jenkins package
sudo yum install java-11-openjdk
sudo yum install jenkins
sudo systemctl daemon-reload

sudo systemctl enable jenkins
#You can start the Jenkins service with the command:

sudo systemctl start jenkins
#You can check the status of the Jenkins service using the command:

sudo systemctl status jenkins
curl ifconfig.co




SONARQUBE INSTALLATION
Prerequisite
AWS Acccount.
Create Redhat EC2 T2.medium Instance with 4GB RAM.
Create Security Group and open Required ports.
9000 ..etc
Attach Security Group to EC2 Instance.
Install java openJDK 1.8+ for SonarQube version 7.8
Create sonar user to manage the SonarQube server
#As a good security practice, SonarQuber Server is not advised to run sonar service as a root user, 
# create a new user called sonar and grant sudo access to manage sonar services as follows

sudo useradd sonar
# Grand sudo access to sonar user
sudo echo "sonar ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/sonar
# set hostname for the sonarqube server
sudo hostnamectl set-hostname sonar 
sudo su - sonar
Assign password to sonar user
sudo passwd sonar
Enable PasswordAuthentication in the server
sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
sudo service sshd restart
Install Java JDK 1.8+ required for sonarqube to start
cd /opt
sudo yum -y install unzip wget git
sudo yum install  java-11-openjdk-devel
Download and extract the SonarqQube Server software.
sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.8.zip
sudo unzip sonarqube-7.8.zip
sudo rm -rf sonarqube-7.8.zip
sudo mv sonarqube-7.8 sonarqube
Grant file permissions for sonar user to start and manage sonarQube
sudo chown -R sonar:sonar /opt/sonarqube/
sudo chmod -R 775 /opt/sonarqube/
start sonarQube server
sh /opt/sonarqube/bin/linux-x86-64/sonar.sh start 
sh /opt/sonarqube/bin/linux-x86-64/sonar.sh status

Ensure that SonarQube is running and Access sonarQube on the browser
sonarqube default port is = 9000
get the sonarqube public ip address
publicIP:9000
curl -v localhost:9000
54.236.232.85:9000
default USERNAME: admin
default password: admin
====================================================


NEXUS INSTALLATION
Olasimbo Bode, [12/26/2022 9:36 PM]
sudo hostname nexus
sudo useradd nexus
# Grand sudo access to nexus user
sudo echo "nexus ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/nexus
sudo su - nexus

Olasimbo Bode, [12/26/2022 9:36 PM]
cd /opt
sudo yum install wget git nano unzip -y
sudo yum install java-11-openjdk-devel java-1.8.0-openjdk-devel -y

Olasimbo Bode, [12/26/2022 9:44 PM]
sudo wget http://download.sonatype.com/nexus/3/nexus-3.15.2-01-unix.tar.gz 
sudo tar -zxvf nexus-3.15.2-01-unix.tar.gz
sudo mv /opt/nexus-3.15.2-01 /opt/nexus

Olasimbo Bode, [12/26/2022 9:45 PM]
# Change the owner and group permissions to /opt/nexus and /opt/sonatype-work directories.
sudo chown -R nexus:nexus /opt/nexus
sudo chown -R nexus:nexus /opt/sonatype-work
sudo chmod -R 775 /opt/nexus
sudo chmod -R 775 /opt/sonatype-work

Olasimbo Bode, [12/26/2022 9:46 PM]
echo  'run_as_user="nexus" ' > /opt/nexus/bin/nexus.rc

Olasimbo Bode, [12/26/2022 9:47 PM]
sudo ln -s /opt/nexus/bin/nexus /etc/init.d/nexus

#9 Enable and start the nexus services
sudo systemctl enable nexus
sudo systemctl start nexus
sudo systemctl status nexus
echo "end of nexus installation"

Olasimbo Bode, [12/26/2022 10:19 PM]
<user username="myLandmark" password="admin123" roles="manager-gui,admin-gui,manager-script"/>

Olasimbo Bode, [12/26/2022 10:26 PM]
vi /opt/tomcat9/webapps/manager/META-INF/context.xml
===================================
access nexus on the browser
34.229.62.93:8081
userName  --- ADMIN
Password   ADMIN123
====================================



TOMCAT INSTALLATION
# install Java JDK 1.8+ as a pre-requisit for tomcat to run.
sudo hostnamectl set-hostname tomcat
cd /opt 
sudo yum install git wget -y
sudo yum install java-1.8.0-openjdk-devel -y
# install wget unzip packages.
sudo yum install wget unzip -y

sudo wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.70/bin/apache-tomcat-9.0.70.tar.gz
sudo tar -xvf apache-tomcat-9.0.70.tar.gz
sudo rm -rf apache-tomcat-9.0.70.tar.gz
### rename tomcat for good naming convention
sudo mv apache-tomcat-9.0.70 tomcat9
### assign executable permissions to the tomcat home directory
sudo chmod 777 -R /opt/tomcat9
sudo chown ec2-user -R /opt/tomcat9
### start tomcat
sh /opt/tomcat9/bin/startup.sh
# create a soft link to start and stop tomcat
# This will enable us to manage tomcat as a service
sudo ln -s /opt/tomcat9/bin/startup.sh /usr/bin/starttomcat
sudo ln -s /opt/tomcat9/bin/shutdown.sh /usr/bin/stoptomcat
starttomcat

























Scripted Pipeline

node{
  def mavenHome = tool name: 'maven3.8.6'
  stage('1cloneCode'){
    git "https://github.com/LandmakTechnology/maven-web-application"
  }
  stage('2Test&Build'){
    sh "${mavenHome}/bin/mvn clean package"
    //bat "${mavenHome}/bin/mvn clean package"
  }
  /*  
  stage('3codeQuality'){
    sh "${mavenHome}/bin/mvn  sonar:sonar"
  }
  stage('4uploadArtifacts'){
    //sh "${mavenHome}/bin/mvn deploy"
    //http://52.53.227.31:8191/landmark/repository/tesla-fe-snapshots/
    //http://52.53.227.31:8191/landmark/repository/tesla-fe-releases/
    // vi pom.xml and added repository details   
    // vi setting.xml and add AUTHENTICATION details  
  } 
  stage('5deploy2UAT'){
    sh "echo 'deploy to UAT'  "
    deploy adapters: [tomcat8(credentialsId: 'tomcat-credentials', path: '', url: 'http://35.170.249.131:8080/')], contextPath: null, war: 'target/*war'
  }
  stage('6approvalGate'){
    sh "echo 'ready for review' "
    timeout(time:5, unit:'DAYS') {
    input message: 'Application ready for deployment, Please review and approve'
      }
  }
  stage('7deploy2Prod'){
    sh "sleep  50"
    deploy adapters: [tomcat8(credentialsId: 'tomcat-credentials', path: '', url: 'http://35.170.249.131:8080/')], contextPath: null, war: 'target/*war'
  }
  stage('8emailNotification'){
    emailext body: '''Hi All,

Check Build status.

Landmark Technologies''', recipientProviders: [buildUser(), developers(), upstreamDevelopers(), brokenBuildSuspects(), brokenTestsSuspects(), contributor()], subject: 'build status', to: 'tesla-app@gmail.com'
  }
  */
}






DECLARATIVE PIPELINES SCRIPT
pipeline{

agent{
label 'slaves'
}

tools{
maven 'maven3.6.3'

}

triggers{
pollSCM('* * * * *')
}

options{
timestamps()
buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5'))
}

stages{

  stage('CheckOutCode'){
    steps{
    git branch: 'development', credentialsId: '957b543e-6f77-4cef-9aec-82e9b0230975', url: 'https://github.com/LandmakTechnology/maven-web-application-1.git'
	
	}
  }
  
  stage('Build'){
  steps{
  sh  "mvn clean package"
  }
  }
/*
 stage('ExecuteSonarQubeReport'){
  steps{
  sh  "mvn clean sonar:sonar"
  }
  }
  
  stage('UploadArtifactsIntoNexus'){
  steps{
  sh  "mvn clean deploy"
  }
  }
  
  stage('DeployAppIntoTomcat'){
  steps{
  sshagent(['bfe1b3c1-c29b-4a4d-b97a-c068b7748cd0']) {
   sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@35.154.190.162:/opt/apache-tomcat-9.0.50/webapps/"    
  }
  }
  }
  */
}//Stages Closing

post{

 success{
 emailext to: 'mylandmarktech@gmail.com,mylandmarktech@yahoo.com',
          subject: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
          body: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
          replyTo: 'mylandmarktech@gmail.com'
 }
 
 failure{
 emailext to: 'mylandmarktech@gmail.com,mylandmarktech@yahoo.com',
          subject: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
          body: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
          replyTo: 'mylandmarktech@gmail.com'
 }
 
}


}//Pipeline closing
Footer



JENKINS_DOCKER DECLARATIVE PIPELINE SCRIPT

pipeline{
  agent any 
  tools{
    maven "maven3.8.4"
  }
  stages{
    stage('GitClone'){
      steps{
        echo "cloning the lastest applications version"
        git "https://github.com/LandmakTechnology/maven-web-application"
      }
    }
      stage('Test+Build'){
      steps{
        sh "echo Running unitTesting"
        sh "mvn clean package"
        echo "echo test successful and backupArtifacts created"
      }
    }
      stage('codeQuality'){
      steps{
        sh "echo Running detail code analysis"
        sh "mvn sonar:sonar"
        sh  "echo All conditions met/passed"
      }
    }
      stage('upLoadArtifacts'){
      steps{
        sh "echo Running detail code analysis"
        sh "mvn deploy"
        sh "echo backupArtifacts in nexus"
      }
    }
      stage('predeployment'){
      steps{
        sh "echo creating docker image"
        sh "docker build -t mylandmarktech/maven-web-app . "
        sh "docker push mylandmarktech/maven-web-app"
      }
    }
    stage('UnDeploy'){
      steps{
        sh "echo UNDEPLOYING existing application"
        sh "docker rm -f webapp"
      }
    }
    stage('deployment'){
      steps{
        sh "echo application ready for deployment"
        sh "docker run -d -p 8000:8080 --name webapp mylandmarktech/maven-web-app"
      }
    }
  stage('emailNotification'){
    steps{
      sh "echo deployment successful"
    }
  }

  }
}
Footer







Docker-Compose.yaml file

version: '3.1'
services:
  springboot:
    image: mylandmarktech/maven-web-app:VERSION
    restart: always
    ports:
    - 9090:8080
    networks:
    - mavenappbridge
networks:
  mavenappbridge:
  
  
  
  KUBERNETES_DEPLOYMENT.YAML FILE
  
  apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
spec:
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: mylandmarktech/maven-web-app
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: myapp
spec:
  type: NodePort
  selector:
    app: myapp
  ports:
  - port: 80
    targetPort: 8080 
    nodePort: 30300




