JENKINS-INSTALLATION
Prerequisite
AWS Acccount.
Create Redhat EC2 T2.medium Instance with 4GB RAM.
Create Security Group and open Required ports.

sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
sudo yum upgrade
# Add required dependencies for the jenkins package
sudo yum install java-11-openjdk
sudo yum install jenkins
sudo systemctl daemon-reload

sudo systemctl enable jenkins
#You can start the Jenkins service with the command:

sudo systemctl start jenkins
#You can check the status of the Jenkins service using the command:

sudo systemctl status jenkins
curl ifconfig.co




SONARQUBE INSTALLATION
Prerequisite
AWS Acccount.
Create Redhat EC2 T2.medium Instance with 4GB RAM.
Create Security Group and open Required ports.
9000 ..etc
Attach Security Group to EC2 Instance.
Install java openJDK 1.8+ for SonarQube version 7.8
Create sonar user to manage the SonarQube server
#As a good security practice, SonarQuber Server is not advised to run sonar service as a root user, 
# create a new user called sonar and grant sudo access to manage sonar services as follows

sudo useradd sonar
# Grand sudo access to sonar user
sudo echo "sonar ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/sonar
# set hostname for the sonarqube server
sudo hostnamectl set-hostname sonar 
sudo su - sonar
Assign password to sonar user
sudo passwd sonar
Enable PasswordAuthentication in the server
sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
sudo service sshd restart
Install Java JDK 1.8+ required for sonarqube to start
cd /opt
sudo yum -y install unzip wget git
sudo yum install  java-11-openjdk-devel
Download and extract the SonarqQube Server software.
sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.8.zip
sudo unzip sonarqube-7.8.zip
sudo rm -rf sonarqube-7.8.zip
sudo mv sonarqube-7.8 sonarqube
Grant file permissions for sonar user to start and manage sonarQube
sudo chown -R sonar:sonar /opt/sonarqube/
sudo chmod -R 775 /opt/sonarqube/
start sonarQube server
sh /opt/sonarqube/bin/linux-x86-64/sonar.sh start 
sh /opt/sonarqube/bin/linux-x86-64/sonar.sh status

Ensure that SonarQube is running and Access sonarQube on the browser
sonarqube default port is = 9000
get the sonarqube public ip address
publicIP:9000
curl -v localhost:9000
54.236.232.85:9000
default USERNAME: admin
default password: admin
====================================================


NEXUS INSTALLATION
Olasimbo Bode, [12/26/2022 9:36 PM]
sudo hostname nexus
sudo useradd nexus
# Grand sudo access to nexus user
sudo echo "nexus ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/nexus
sudo su - nexus

Olasimbo Bode, [12/26/2022 9:36 PM]
cd /opt
sudo yum install wget git nano unzip -y
sudo yum install java-11-openjdk-devel java-1.8.0-openjdk-devel -y

Olasimbo Bode, [12/26/2022 9:44 PM]
sudo wget http://download.sonatype.com/nexus/3/nexus-3.15.2-01-unix.tar.gz 
sudo tar -zxvf nexus-3.15.2-01-unix.tar.gz
sudo mv /opt/nexus-3.15.2-01 /opt/nexus

Olasimbo Bode, [12/26/2022 9:45 PM]
# Change the owner and group permissions to /opt/nexus and /opt/sonatype-work directories.
sudo chown -R nexus:nexus /opt/nexus
sudo chown -R nexus:nexus /opt/sonatype-work
sudo chmod -R 775 /opt/nexus
sudo chmod -R 775 /opt/sonatype-work

Olasimbo Bode, [12/26/2022 9:46 PM]
echo  'run_as_user="nexus" ' > /opt/nexus/bin/nexus.rc

Olasimbo Bode, [12/26/2022 9:47 PM]
sudo ln -s /opt/nexus/bin/nexus /etc/init.d/nexus

#9 Enable and start the nexus services
sudo systemctl enable nexus
sudo systemctl start nexus
sudo systemctl status nexus
echo "end of nexus installation"

Olasimbo Bode, [12/26/2022 10:19 PM]
<user username="myLandmark" password="admin123" roles="manager-gui,admin-gui,manager-script"/>

Olasimbo Bode, [12/26/2022 10:26 PM]
vi /opt/tomcat9/webapps/manager/META-INF/context.xml
===================================
access nexus on the browser
34.229.62.93:8081
userName  --- ADMIN
Password   ADMIN123
====================================



TOMCAT INSTALLATION
# install Java JDK 1.8+ as a pre-requisit for tomcat to run.
sudo hostnamectl set-hostname tomcat
cd /opt 
sudo yum install git wget -y
sudo yum install java-1.8.0-openjdk-devel -y
# install wget unzip packages.
sudo yum install wget unzip -y

sudo wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.70/bin/apache-tomcat-9.0.70.tar.gz
sudo tar -xvf apache-tomcat-9.0.70.tar.gz
sudo rm -rf apache-tomcat-9.0.70.tar.gz
### rename tomcat for good naming convention
sudo mv apache-tomcat-9.0.70 tomcat9
### assign executable permissions to the tomcat home directory
sudo chmod 777 -R /opt/tomcat9
sudo chown ec2-user -R /opt/tomcat9
### start tomcat
sh /opt/tomcat9/bin/startup.sh
# create a soft link to start and stop tomcat
# This will enable us to manage tomcat as a service
sudo ln -s /opt/tomcat9/bin/startup.sh /usr/bin/starttomcat
sudo ln -s /opt/tomcat9/bin/shutdown.sh /usr/bin/stoptomcat
starttomcat




DOCKER-JENKINS_INSTALLATION


#!/bin/bash
# Run this as a script
sudo hostname docker
sudo apt update -y
sudo apt install docker.io -y
sudo usermod -aG docker ubuntu

# Install java as jenkins dependency
sudo apt install openjdk-11-jdk -y
# install jenkis in ubuntu:
sudo wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > \
    /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update
sudo apt-get install jenkins -y 
sudo systemctl start jenkins 

echo "jenkins  ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jenkins" 
sudo echo "jenkins:admin" | chpasswd
sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
sudo service sshd restart
sudo usermod -aG  docker jenkins







#Install Terraform on Ubuntu:
 $sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
 $curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
 $sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
 $sudo apt-get update && sudo apt-get install terraform










Scripted Pipeline

node{
  def mavenHome = tool name: 'maven3.8.6'
  stage('1cloneCode'){
    git "https://github.com/LandmakTechnology/maven-web-application"
  }
  stage('2Test&Build'){
    sh "${mavenHome}/bin/mvn clean package"
    //bat "${mavenHome}/bin/mvn clean package"
  }
  /*  
  stage('3codeQuality'){
    sh "${mavenHome}/bin/mvn  sonar:sonar"
  }
  stage('4uploadArtifacts'){
    //sh "${mavenHome}/bin/mvn deploy"
    //http://52.53.227.31:8191/landmark/repository/tesla-fe-snapshots/
    //http://52.53.227.31:8191/landmark/repository/tesla-fe-releases/
    // vi pom.xml and added repository details   
    // vi setting.xml and add AUTHENTICATION details  
  } 
  stage('5deploy2UAT'){
    sh "echo 'deploy to UAT'  "
    deploy adapters: [tomcat8(credentialsId: 'tomcat-credentials', path: '', url: 'http://35.170.249.131:8080/')], contextPath: null, war: 'target/*war'
  }
  stage('6approvalGate'){
    sh "echo 'ready for review' "
    timeout(time:5, unit:'DAYS') {
    input message: 'Application ready for deployment, Please review and approve'
      }
  }
  stage('7deploy2Prod'){
    sh "sleep  50"
    deploy adapters: [tomcat8(credentialsId: 'tomcat-credentials', path: '', url: 'http://35.170.249.131:8080/')], contextPath: null, war: 'target/*war'
  }
  stage('8emailNotification'){
    emailext body: '''Hi All,

Check Build status.

Landmark Technologies''', recipientProviders: [buildUser(), developers(), upstreamDevelopers(), brokenBuildSuspects(), brokenTestsSuspects(), contributor()], subject: 'build status', to: 'tesla-app@gmail.com'
  }
  */
}






DECLARATIVE PIPELINES SCRIPT
pipeline{

agent{
label 'slaves'
}

tools{
maven 'maven3.6.3'

}

triggers{
pollSCM('* * * * *')
}

options{
timestamps()
buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5'))
}

stages{

  stage('CheckOutCode'){
    steps{
    git branch: 'development', credentialsId: '957b543e-6f77-4cef-9aec-82e9b0230975', url: 'https://github.com/LandmakTechnology/maven-web-application-1.git'
	
	}
  }
  
  stage('Build'){
  steps{
  sh  "mvn clean package"
  }
  }
/*
 stage('ExecuteSonarQubeReport'){
  steps{
  sh  "mvn clean sonar:sonar"
  }
  }
  
  stage('UploadArtifactsIntoNexus'){
  steps{
  sh  "mvn clean deploy"
  }
  }
  
  stage('DeployAppIntoTomcat'){
  steps{
  sshagent(['bfe1b3c1-c29b-4a4d-b97a-c068b7748cd0']) {
   sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@35.154.190.162:/opt/apache-tomcat-9.0.50/webapps/"    
  }
  }
  }
  */
}//Stages Closing

post{

 success{
 emailext to: 'mylandmarktech@gmail.com,mylandmarktech@yahoo.com',
          subject: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
          body: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
          replyTo: 'mylandmarktech@gmail.com'
 }
 
 failure{
 emailext to: 'mylandmarktech@gmail.com,mylandmarktech@yahoo.com',
          subject: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
          body: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
          replyTo: 'mylandmarktech@gmail.com'
 }
 
}


}//Pipeline closing
Footer



JENKINS_DOCKER DECLARATIVE PIPELINE SCRIPT

pipeline{
  agent any 
  tools{
    maven "maven3.8.4"
  }
  stages{
    stage('GitClone'){
      steps{
        echo "cloning the lastest applications version"
        git "https://github.com/LandmakTechnology/maven-web-application"
      }
    }
      stage('Test+Build'){
      steps{
        sh "echo Running unitTesting"
        sh "mvn clean package"
        echo "echo test successful and backupArtifacts created"
      }
    }
      stage('codeQuality'){
      steps{
        sh "echo Running detail code analysis"
        sh "mvn sonar:sonar"
        sh  "echo All conditions met/passed"
      }
    }
      stage('upLoadArtifacts'){
      steps{
        sh "echo Running detail code analysis"
        sh "mvn deploy"
        sh "echo backupArtifacts in nexus"
      }
    }
      stage('predeployment'){
      steps{
        sh "echo creating docker image"
        sh "docker build -t mylandmarktech/maven-web-app . "
        sh "docker push mylandmarktech/maven-web-app"
      }
    }
    stage('UnDeploy'){
      steps{
        sh "echo UNDEPLOYING existing application"
        sh "docker rm -f webapp"
      }
    }
    stage('deployment'){
      steps{
        sh "echo application ready for deployment"
        sh "docker run -d -p 8000:8080 --name webapp mylandmarktech/maven-web-app"
      }
    }
  stage('emailNotification'){
    steps{
      sh "echo deployment successful"
    }
  }

  }
}
Footer







Docker-Compose.yaml file

version: '3.1'
services:
  springboot:
    image: mylandmarktech/maven-web-app:VERSION
    restart: always
    ports:
    - 9090:8080
    networks:
    - mavenappbridge
networks:
  mavenappbridge:
  
  
  
  DOCKERFILE
FROM mcr.microsoft.com/dotnet/aspnet:5.0-focal AS base
WORKDIR /app
EXPOSE 5000

ENV ASPNETCORE_URLS=http://+:5000

# Creates a non-root user with an explicit UID and adds permission to access the /app folder
# For more info, please refer to https://aka.ms/vscode-docker-dotnet-configure-containers
RUN adduser -u 5678 --disabled-password --gecos "" appuser && chown -R appuser /app
USER appuser

FROM mcr.microsoft.com/dotnet/sdk:5.0-focal AS build
WORKDIR /src
COPY ["infra-api/infra-api.csproj", "infra-api/"]
RUN dotnet restore "infra-api/infra-api.csproj"
COPY . .
WORKDIR "/src/infra-api"
RUN dotnet build "infra-api.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "infra-api.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "infra-api.dll"]
Footer

  
  
  
  
  
  
  
  
  KUBERNETES_DEPLOYMENT.YAML FILE
  
  apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
spec:
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: mylandmarktech/maven-web-app
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: myapp
spec:
  type: NodePort
  selector:
    app: myapp
  ports:
  - port: 80
    targetPort: 8080 
    nodePort: 30300



Ansible Playbook_Uninstall Jenkins


- hosts: appServers
  gather_facts: false
  become: true
  tasks:
  
  - name: uninstall wget
    yum:
     name: wget
     state: absent

  - name: uninstall openjdk
    yum:
     name: java-1.8.0-openjdk
     state: absent
    
  - name: uninstall jenkins
    yum:
     name: jenkins
     state: absent
    
 
    
  - name: Remove Jenkins folder
    shell: rm -rf  /var/lib/jenkins
    changed_when: false
    register: result
    
  - name: print init password jenkins
    debug:
     var: result.stdout



TERRAFORM_MODULES

terraform {
 required_providers {
 aws = {
 source = "hashicorp/aws"
 # optional
 version = "~> 3.0"
 }
 }
}
# Configuring provider
provider "aws" {
 region = "us-east-1"
 access_key = "your access"
 secret_key = "your secret key"
}
# Creating a VPC
resource "aws_vpc" "proj-vpc" {
 cidr_block = "10.0.0.0/16"
}
# Create an Internet Gateway
resource "aws_internet_gateway" "proj-ig" {
 vpc_id = aws_vpc.proj-vpc.id
 tags = {
 Name = "gateway1"
 }
}
# Setting up the route table
resource "aws_route_table" "proj-rt" {
 vpc_id = aws_vpc.proj-vpc.id
 route {
 # pointing to the internet
 cidr_block = "0.0.0.0/0"
 gateway_id = aws_internet_gateway.proj-ig.id
 }
 route {
 ipv6_cidr_block = "::/0"
 gateway_id = aws_internet_gateway.proj-ig.id
 }
 tags = {
 Name = "rt1"
 }
}
# Setting up the subnet
resource "aws_subnet" "proj-subnet" {
 vpc_id = aws_vpc.proj-vpc.id
 cidr_block = "10.0.1.0/24"
 availability_zone = "us-east-1b"
 tags = {
 Name = "subnet1"
 }
}
# Associating the subnet with the route table
resource "aws_route_table_association" "proj-rt-sub-assoc" {
 subnet_id = aws_subnet.proj-subnet.id
 route_table_id = aws_route_table.proj-rt.id
}
# Creating a Security Group
resource "aws_security_group" "proj-sg" {
 name = "proj-sg"
 description = "Enable web traffic for the project"
 vpc_id = aws_vpc.proj-vpc.id
 ingress {
 description = "HTTPS traffic"
 from_port = 443
 to_port = 443
 protocol = "tcp"
 cidr_blocks = ["0.0.0.0/0"]
 }
ingress {
 description = "HTTP traffic"
 from_port = 80
 to_port = 80
 protocol = "tcp"
 cidr_blocks = ["0.0.0.0/0"]
 }
 ingress {
 description = "SSH port"
 from_port = 22
 to_port = 22
 protocol = "tcp"
 cidr_blocks = ["0.0.0.0/0"]
 }
 egress {
 from_port = 0
 to_port = 0
 protocol = "-1"
 cidr_blocks = ["0.0.0.0/0"]
 ipv6_cidr_blocks = ["::/0"]
 }
 tags = {
 Name = "proj-sg1"
 }
}
# Creating a new network interface
resource "aws_network_interface" "proj-ni" {
 subnet_id = aws_subnet.proj-subnet.id
 private_ips = ["10.0.1.10"]
 security_groups = [aws_security_group.proj-sg.id]
}
# Attaching an elastic IP to the network interface
resource "aws_eip" "proj-eip" {
 vpc = true
 network_interface = aws_network_interface.proj-ni.id
 associate_with_private_ip = "10.0.1.10"
}
# Creating an Ubuntu EC2 instance
resource "aws_instance" "proj-instance" {
 ami = "ami-089a545a9ed9893b6"
 instance_type = "t2.micro"
 availability_zone = "us-east-1b"
 key_name = "docker-jenkinskey"
 network_interface {
 device_index = 0
 network_interface_id = aws_network_interface.proj-ni.id
 }
 user_data = <<-EOF
 #!/bin/bash
 sudo apt update -y
 sudo apt install nginx -y
 sudo systemctl start nginx
 sudo systemctl enable nginx
 sudo apt install docker.io -y
 sudo systemctl enable docker
 sudo docker run -d -p 8082:8080 engawe2573/spring-boot-mongo
 EOF
 tags = {
 Name = "project-instance"
 }
}
Footer


SCRIPTING

# switch case 1
echo "Switch case demo starts.."
case $1 in
start) echo "starting sq server.."
echo "started..."
;;
stop)
echo "stopping the server"
echo "server stopped";;
restart)
echo "restarting the server"
echo "server restarted"
;;
*)
echo "You have to pass start|stop|restart"
;;
esac
echo "Switch case is over"
_________________________________________________________
# switch case 2
echo "Please enter the number 1 to 5 only"
read num
case $num in
1)
echo "you have type one in the correct number range"
;;
2)
echo "you have type two in the correct number range"
;;
3)
echo "you have type 3 in the correct number range"
;;
*)
echo "you have to type 1 to 5"
echo "you have type an invalid number range"
;;
esac
echo "done"
___________________
# Functions
devfn()
{
echo "FelloW Engineers"
echo "DevOps is above the middle class"
echo "Welcome to a new era"
}
source ./fn1.sh
devfn
______________________________________

# Script to adduser
# Author Landmark Technology
# This script will create a user account
# You need to be root or have sudo access to execute
echo -n "Enter the username: "
read username
echo -n "Enter the password: "
read -s password
adduser "$username"
echo "$password" | passwd "$username" --stdin
<<ST
--stdin
      This option is used to indicate that passwd should read the new
      password from standard input, which can be a pipe.
cat /etc/passwd to verify
ST
